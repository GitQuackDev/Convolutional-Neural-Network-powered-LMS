// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  password          String?  // Optional for OAuth users
  firstName         String
  lastName          String
  avatar            String?
  role              UserRole @default(STUDENT)
  isEmailVerified   Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  googleId          String?  @unique
  lastLogin         DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  courses           CourseEnrollment[]
  ownedCourses      Course[] @relation("CourseOwner")
  assignments       Assignment[]
  submissions       Submission[]
  discussions       Discussion[]
  discussionReplies DiscussionReply[]
  analysisResults   CNNAnalysis[]
  
  // New analytics and communication relations
  userAnalytics     UserAnalytics[]
  sessionMetrics    SessionMetrics[]
  aiAnalysisResults AIAnalysisResults[]
  sentMessages      ChatMessage[]
  notifications     Notification[]
  
  // Collaboration annotation relations
  authoredAnnotations CollaborationAnnotation[] @relation("AnnotationAuthor")
  resolvedAnnotations CollaborationAnnotation[] @relation("AnnotationResolver")
  moderatedAnnotations CollaborationAnnotation[] @relation("AnnotationModerator")
  
  // Advanced insights and reporting relations (Story 1.9)
  generatedInsights GeneratedInsight[] @relation("UserInsights")
  generatedReports  AdvancedReport[]   @relation("UserReports")
  
  @@map("users")
}

enum UserRole {
  STUDENT
  PROFESSOR
  ADMIN
  COMMUNITY_MODERATOR
  REGULAR_MODERATOR
}

// Course Management
model Course {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  syllabus         String?
  coverImage       String?
  isPublic         Boolean  @default(false)
  isActive         Boolean  @default(true)
  maxStudents      Int?
  estimatedHours   Int?
  difficulty       CourseDifficulty @default(BEGINNER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  ownerId          String   @db.ObjectId
  owner            User     @relation("CourseOwner", fields: [ownerId], references: [id])
  enrollments      CourseEnrollment[]
  modules          CourseModule[]
  assignments      Assignment[]
  discussions      Discussion[]
  chatMessages     ChatMessage[]
  
  // Advanced insights relations (Story 1.9)
  insights         GeneratedInsight[] @relation("CourseInsights")

  @@map("courses")
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model CourseEnrollment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  enrolledAt   DateTime @default(now())
  completedAt  DateTime?
  progress     Float    @default(0) // 0-1
  isActive     Boolean  @default(true)

  // Relations
  userId       String   @db.ObjectId
  courseId     String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  course       Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model CourseModule {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  content           String?  // HTML content
  order             Int
  estimatedMinutes  Int      @default(30)
  isRequired        Boolean  @default(true)
  isLocked          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  courseId          String   @db.ObjectId
  course            Course   @relation(fields: [courseId], references: [id])
  steps             CourseStep[]

  @@map("course_modules")
}

model CourseStep {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  content              String?  // HTML content
  type                 StepType
  order                Int
  estimatedTime        Int      @default(15) // minutes
  isRequired           Boolean  @default(true)
  cnnAnalysisEnabled   Boolean  @default(false)
  resources            Json?    // Additional resources/links
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  moduleId             String   @db.ObjectId
  module               CourseModule @relation(fields: [moduleId], references: [id])

  @@map("course_steps")
}

enum StepType {
  CONTENT
  VIDEO
  UPLOAD
  QUIZ
  ASSIGNMENT
  DISCUSSION
}

// Assignment Management
model Assignment {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String
  instructions        String?
  pointsWorth         Int      @default(100)
  allowedAttempts     Int      @default(1)
  acceptedFileTypes   String[] // ["jpg", "png", "pdf"]
  maxFileSize         Int      @default(10485760) // 10MB in bytes
  dueDate             DateTime?
  availableFrom       DateTime @default(now())
  availableUntil      DateTime?
  allowLateSubmission Boolean  @default(false)
  latePenaltyPercent  Float?   // Daily penalty as percentage
  requiresCNNAnalysis Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  courseId            String   @db.ObjectId
  professorId         String   @db.ObjectId
  course              Course   @relation(fields: [courseId], references: [id])
  professor           User     @relation(fields: [professorId], references: [id])
  submissions         Submission[]
  rubric              Rubric?

  @@map("assignments")
}

model Submission {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  attemptNumber     Int      @default(1)
  status            SubmissionStatus @default(DRAFT)
  submittedAt       DateTime?
  grade             Float?   // 0-100 or based on rubric
  feedback          String?
  isLate            Boolean  @default(false)
  latePenaltyApplied Float?
  files             SubmissionFile[]
  cnnAnalysisResults Json?   // Store CNN analysis results
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  assignmentId      String   @db.ObjectId
  studentId         String   @db.ObjectId
  assignment        Assignment @relation(fields: [assignmentId], references: [id])
  student           User     @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId, attemptNumber])
  @@map("submissions")
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

model SubmissionFile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  originalName String
  fileName     String   // Stored filename
  filePath     String   // Full path to file
  fileSize     Int
  mimeType     String
  uploadedAt   DateTime @default(now())

  // Relations
  submissionId String   @db.ObjectId
  submission   Submission @relation(fields: [submissionId], references: [id])

  @@map("submission_files")
}

// Grading System
model Rubric {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  totalPoints Int
  criteria    RubricCriteria[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignmentId String  @unique @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@map("rubrics")
}

model RubricCriteria {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  maxPoints   Int
  order       Int
  levels      RubricLevel[]

  // Relations
  rubricId    String   @db.ObjectId
  rubric      Rubric   @relation(fields: [rubricId], references: [id])

  @@map("rubric_criteria")
}

model RubricLevel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // e.g., "Excellent", "Good", "Needs Improvement"
  description String?
  points      Int
  order       Int

  // Relations
  criteriaId  String   @db.ObjectId
  criteria    RubricCriteria @relation(fields: [criteriaId], references: [id])

  @@map("rubric_levels")
}

// CNN Analysis & Content Intelligence
model CNNAnalysis {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName         String
  originalFileName String
  filePath         String
  fileSize         Int
  mimeType         String
  confidence       Float    // Overall confidence score
  analysisResults  Json     // Store full CNN analysis
  wikipediaData    Json?    // Enriched Wikipedia information
  categories       String[] // Auto-generated categories
  tags             String[] // Auto-generated tags
  processingTime   Int?     // Time taken for analysis in ms
  modelVersions    Json?    // Track which models were used
  createdAt        DateTime @default(now())

  // Relations
  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])

  @@map("cnn_analyses")
}

// Discussion Forums
model Discussion {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String
  isAnonymous  Boolean  @default(false)
  isPinned     Boolean  @default(false)
  isLocked     Boolean  @default(false)
  tags         String[]
  viewCount    Int      @default(0)
  replyCount   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  authorId     String?  @db.ObjectId // Nullable for anonymous posts
  courseId     String?  @db.ObjectId // Nullable for general discussions
  author       User?    @relation(fields: [authorId], references: [id])
  course       Course?  @relation(fields: [courseId], references: [id])
  replies      DiscussionReply[]

  @@map("discussions")
}

model DiscussionReply {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  isAnonymous    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  discussionId   String   @db.ObjectId
  authorId       String?  @db.ObjectId // Nullable for anonymous replies
  discussion     Discussion @relation(fields: [discussionId], references: [id])
  author         User?    @relation(fields: [authorId], references: [id])

  @@map("discussion_replies")
}

// System Configuration
model SystemConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Analytics Collections
model UserAnalytics {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @db.ObjectId
  sessionId           String   
  pageViews           Json     // Page visit tracking
  contentInteractions Json     // Clicks, time spent, scroll depth
  cnnAnalysisUsage    Json     // CNN feature usage patterns
  learningProgress    Json     // Progress metrics and achievements
  timestamp           DateTime @default(now())
  
  user                User     @relation(fields: [userId], references: [id])
  
  @@index([userId, timestamp])
  @@map("user_analytics")
}

model SessionMetrics {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @db.ObjectId
  sessionStart        DateTime
  sessionEnd          DateTime?
  activeTime          Int      // Active time in seconds
  courseInteractions  Json     // Course-specific interactions
  assignmentProgress  Json     // Assignment completion data
  engagementScore     Float    // Calculated engagement metric
  
  user                User     @relation(fields: [userId], references: [id])
  
  @@index([userId, sessionStart])
  @@map("session_metrics")
}

model AIAnalysisResults {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName              String
  originalFileName      String
  filePath              String
  userId                String   @db.ObjectId
  cnnResults            Json?    // Original CNN analysis results
  gpt4Results           Json?    // GPT-4 analysis results
  claudeResults         Json?    // Claude analysis results
  geminiResults         Json?    // Gemini analysis results
  consolidatedInsights  Json     // Combined AI insights
  processingTime        Json     // Time breakdown per AI model
  confidence            Float    // Overall confidence score
  createdAt             DateTime @default(now())
  
  user                  User     @relation(fields: [userId], references: [id])
  
  @@index([userId, fileName, createdAt])
  @@map("ai_analysis_results")
}

// Communication Collections
model ChatMessage {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  messageType MessageType @default(TEXT)
  senderId    String      @db.ObjectId
  courseId    String?     @db.ObjectId // Course context
  channelId   String?     // Study group or specific channel
  isEdited    Boolean     @default(false)
  editedAt    DateTime?
  readBy      String[]    @db.ObjectId // Array of user IDs who read message
  createdAt   DateTime    @default(now())
  
  sender      User        @relation(fields: [senderId], references: [id])
  course      Course?     @relation(fields: [courseId], references: [id])
  
  @@index([courseId, createdAt])
  @@index([senderId, createdAt])
  @@map("chat_messages")
}

enum MessageType {
  TEXT
  FILE
  SYSTEM
  ANNOUNCEMENT
}

model Notification {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  userId    String               @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      Json?                // Additional notification data
  isRead    Boolean              @default(false)
  readAt    DateTime?
  priority  NotificationPriority @default(NORMAL)
  expiresAt DateTime?
  createdAt DateTime             @default(now())
  
  user      User                 @relation(fields: [userId], references: [id])
  
  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

enum NotificationType {
  CNN_ANALYSIS_COMPLETE
  PEER_CONNECTION
  ASSIGNMENT_DUE
  NEW_MESSAGE
  SYSTEM_UPDATE
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Collaborative Annotations
model CollaborationAnnotation {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  contentId       String           @db.ObjectId // Associated content (assignment, course material, etc.)
  contentType     AnnotationContentType
  authorId        String           @db.ObjectId
  text            String           // Annotation text content
  position        Json             // Position data: {x, y, width, height, page?}
  selectionData   Json?            // Text selection: {start, end, selectedText}
  annotationType  AnnotationType   @default(COMMENT)
  isResolved      Boolean          @default(false)
  resolvedAt      DateTime?
  resolvedBy      String?          @db.ObjectId
  threadId        String?          @db.ObjectId // For threaded replies
  parentId        String?          @db.ObjectId // For direct replies
  visibility      AnnotationVisibility @default(COURSE)
  permissions     Json             // Role-based visibility: {instructor: true, students: false}
  metadata        Json?            // Additional data: tags, category, etc.
  
  // Moderation fields
  isHidden        Boolean          @default(false)
  isFlagged       Boolean          @default(false)
  isDeleted       Boolean          @default(false)
  deletedAt       DateTime?
  moderationStatus String?         // PENDING, APPROVED, HIDDEN, FLAGGED, DELETED
  moderationReason String?
  moderatedAt     DateTime?
  moderatedBy     String?          @db.ObjectId
  
  version         Int              @default(1)
  isEdited        Boolean          @default(false)
  editedAt        DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  author          User             @relation("AnnotationAuthor", fields: [authorId], references: [id])
  resolver        User?            @relation("AnnotationResolver", fields: [resolvedBy], references: [id])
  moderator       User?            @relation("AnnotationModerator", fields: [moderatedBy], references: [id])
  thread          CollaborationAnnotation? @relation("AnnotationThread", fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         CollaborationAnnotation[] @relation("AnnotationThread")
  parent          CollaborationAnnotation? @relation("AnnotationReply", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        CollaborationAnnotation[] @relation("AnnotationReply")
  
  @@index([contentId, contentType, createdAt])
  @@index([authorId, createdAt])
  @@index([threadId, createdAt])
  @@index([contentId, visibility, isResolved])
  @@index([moderationStatus, isFlagged, isHidden])
  @@map("collaboration_annotations")
}

enum AnnotationContentType {
  ASSIGNMENT
  COURSE_MATERIAL
  CNN_ANALYSIS
  CHAT_MESSAGE
  UPLOADED_FILE
}

enum AnnotationType {
  COMMENT
  QUESTION
  SUGGESTION
  HIGHLIGHT
  DRAWING
  BOOKMARK
}

enum AnnotationVisibility {
  PRIVATE      // Only author can see
  COURSE       // All course members
  INSTRUCTORS  // Only instructors
  STUDY_GROUP  // Study group members
  PUBLIC       // All platform users
}

// Advanced Insights and Reporting System (Story 1.9)
model GeneratedInsight {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  type              InsightType
  title             String
  description       String
  confidence        Float
  userId            String              @db.ObjectId
  courseId          String?             @db.ObjectId
  contentId         String?             @db.ObjectId
  analyticsDataIds  String[]            @db.ObjectId // References to analytics data used
  aiResultIds       String[]            @db.ObjectId // References to AI analysis results used
  supportingData    Json
  isActionable      Boolean             @default(false)
  isResolved        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  user              User                @relation("UserInsights", fields: [userId], references: [id])
  course            Course?             @relation("CourseInsights", fields: [courseId], references: [id])
  recommendations   Recommendation[]    @relation("InsightRecommendations")
  
  @@index([type, confidence])
  @@index([userId, courseId])
  @@index([createdAt])
  @@map("generated_insights")
}

model PredictiveInsight {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  type              PredictionType
  subject           String              @db.ObjectId // studentId, courseId, or contentId
  subjectType       String              // 'user', 'course', 'content'
  prediction        Json                // PredictionResult object
  confidence        Float
  factors           Json                // PredictionFactor[]
  timeline          Json                // PredictionTimeline object
  historicalDataIds String[]            @db.ObjectId // References to historical data used
  createdAt         DateTime            @default(now())
  expiresAt         DateTime            // When prediction becomes stale
  
  recommendations   Recommendation[]    @relation("PredictionRecommendations")
  
  @@index([type, confidence])
  @@index([subject, subjectType])
  @@index([createdAt])
  @@map("predictive_insights")
}

model Recommendation {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  type              RecommendationType
  priority          RecommendationPriority
  title             String
  description       String
  targetUserId      String?             @db.ObjectId
  targetCourseId    String?             @db.ObjectId
  targetContentId   String?             @db.ObjectId
  actionRequired    String
  expectedImpact    String
  confidence        Float
  sourceInsightId   String?             @db.ObjectId
  sourcePredictionId String?            @db.ObjectId
  isImplemented     Boolean             @default(false)
  implementedAt     DateTime?
  createdAt         DateTime            @default(now())
  expiresAt         DateTime?
  
  sourceInsight     GeneratedInsight?   @relation("InsightRecommendations", fields: [sourceInsightId], references: [id])
  sourcePrediction  PredictiveInsight?  @relation("PredictionRecommendations", fields: [sourcePredictionId], references: [id])
  
  @@index([type, priority])
  @@index([targetUserId, targetCourseId])
  @@index([createdAt])
  @@map("recommendations")
}

model AdvancedReport {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  templateId        String
  filters           Json                // InsightFilters object
  sections          Json                // ReportSection[]
  executiveSummary  Json                // ExecutiveSummary object
  recommendations   Json                // Recommendation[]
  format            ReportFormat
  generatedBy       String              @db.ObjectId
  generatedAt       DateTime            @default(now())
  downloadUrl       String?
  isScheduled       Boolean             @default(false)
  scheduleConfig    Json?               // ScheduleConfiguration object
  
  generatedByUser   User                @relation("UserReports", fields: [generatedBy], references: [id])
  
  @@index([generatedBy, generatedAt])
  @@index([isScheduled])
  @@map("advanced_reports")
}

// Enums for Advanced Insights System
enum InsightType {
  PERFORMANCE_TREND
  CONTENT_EFFECTIVENESS
  ENGAGEMENT_PATTERN
  PREDICTIVE_ALERT
  RECOMMENDATION
  LEARNING_OUTCOME
  BEHAVIORAL_PATTERN
  INTERVENTION_NEEDED
}

enum PredictionType {
  STUDENT_PERFORMANCE
  CONTENT_ENGAGEMENT
  COURSE_COMPLETION
  LEARNING_DIFFICULTY
  INTERVENTION_NEEDED
  DROPOUT_RISK
  SUCCESS_PROBABILITY
}

enum RecommendationType {
  CONTENT_OPTIMIZATION
  TEACHING_STRATEGY
  STUDENT_SUPPORT
  COURSE_MODIFICATION
  INTERVENTION_ACTION
  ENGAGEMENT_IMPROVEMENT
  PERSONALIZATION
}

enum RecommendationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum ReportFormat {
  PDF
  CSV
  JSON
  INTERACTIVE_WEB
  PRESENTATION
}
